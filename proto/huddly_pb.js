// source: proto/huddly.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.huddly.AZStatus', null, global);
goog.exportSymbol('proto.huddly.BootSlot', null, global);
goog.exportSymbol('proto.huddly.Brightness', null, global);
goog.exportSymbol('proto.huddly.CNNStatus', null, global);
goog.exportSymbol('proto.huddly.Chunk', null, global);
goog.exportSymbol('proto.huddly.CnnFeature', null, global);
goog.exportSymbol('proto.huddly.CropIndexStatusRequest', null, global);
goog.exportSymbol('proto.huddly.CropIndexStatusResponse', null, global);
goog.exportSymbol('proto.huddly.CurrentPtzCrop', null, global);
goog.exportSymbol('proto.huddly.DeviceName', null, global);
goog.exportSymbol('proto.huddly.DeviceStatus', null, global);
goog.exportSymbol('proto.huddly.DeviceVersion', null, global);
goog.exportSymbol('proto.huddly.FBEStatus', null, global);
goog.exportSymbol('proto.huddly.Feature', null, global);
goog.exportSymbol('proto.huddly.IndexedTransitions', null, global);
goog.exportSymbol('proto.huddly.IndexedTransitions.Transition', null, global);
goog.exportSymbol('proto.huddly.IndexedTransitions.Transition.Crop', null, global);
goog.exportSymbol('proto.huddly.IndexedTransitionsResponse', null, global);
goog.exportSymbol('proto.huddly.Ipv4Config', null, global);
goog.exportSymbol('proto.huddly.LogFile', null, global);
goog.exportSymbol('proto.huddly.LogFiles', null, global);
goog.exportSymbol('proto.huddly.Mode', null, global);
goog.exportSymbol('proto.huddly.PTZ', null, global);
goog.exportSymbol('proto.huddly.Range', null, global);
goog.exportSymbol('proto.huddly.Rect', null, global);
goog.exportSymbol('proto.huddly.Slot', null, global);
goog.exportSymbol('proto.huddly.StatusCode', null, global);
goog.exportSymbol('proto.huddly.Temperature', null, global);
goog.exportSymbol('proto.huddly.Temperatures', null, global);
goog.exportSymbol('proto.huddly.Timezone', null, global);
goog.exportSymbol('proto.huddly.Uptime', null, global);
goog.exportSymbol('proto.huddly.VersionState', null, global);
goog.exportSymbol('proto.huddly.VideoFormats', null, global);
goog.exportSymbol('proto.huddly.VideoFormats.Format', null, global);
goog.exportSymbol('proto.huddly.VideoType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.CropIndexStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.CropIndexStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.CropIndexStatusRequest.displayName = 'proto.huddly.CropIndexStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.CropIndexStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.CropIndexStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.CropIndexStatusResponse.displayName = 'proto.huddly.CropIndexStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.Rect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.Rect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.Rect.displayName = 'proto.huddly.Rect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.Range = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.Range.displayName = 'proto.huddly.Range';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.VideoFormats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.huddly.VideoFormats.repeatedFields_, null);
};
goog.inherits(proto.huddly.VideoFormats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.VideoFormats.displayName = 'proto.huddly.VideoFormats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.VideoFormats.Format = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.VideoFormats.Format, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.VideoFormats.Format.displayName = 'proto.huddly.VideoFormats.Format';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.IndexedTransitions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.huddly.IndexedTransitions.repeatedFields_, null);
};
goog.inherits(proto.huddly.IndexedTransitions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.IndexedTransitions.displayName = 'proto.huddly.IndexedTransitions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.IndexedTransitions.Transition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.huddly.IndexedTransitions.Transition.repeatedFields_, null);
};
goog.inherits(proto.huddly.IndexedTransitions.Transition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.IndexedTransitions.Transition.displayName = 'proto.huddly.IndexedTransitions.Transition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.IndexedTransitions.Transition.Crop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.IndexedTransitions.Transition.Crop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.IndexedTransitions.Transition.Crop.displayName = 'proto.huddly.IndexedTransitions.Transition.Crop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.IndexedTransitionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.IndexedTransitionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.IndexedTransitionsResponse.displayName = 'proto.huddly.IndexedTransitionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.CurrentPtzCrop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.CurrentPtzCrop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.CurrentPtzCrop.displayName = 'proto.huddly.CurrentPtzCrop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.Chunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.Chunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.Chunk.displayName = 'proto.huddly.Chunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.DeviceVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.DeviceVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.DeviceVersion.displayName = 'proto.huddly.DeviceVersion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.PTZ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.PTZ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.PTZ.displayName = 'proto.huddly.PTZ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.DeviceName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.DeviceName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.DeviceName.displayName = 'proto.huddly.DeviceName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.BootSlot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.BootSlot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.BootSlot.displayName = 'proto.huddly.BootSlot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.DeviceStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.DeviceStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.DeviceStatus.displayName = 'proto.huddly.DeviceStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.Ipv4Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.Ipv4Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.Ipv4Config.displayName = 'proto.huddly.Ipv4Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.Temperature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.Temperature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.Temperature.displayName = 'proto.huddly.Temperature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.Temperatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.huddly.Temperatures.repeatedFields_, null);
};
goog.inherits(proto.huddly.Temperatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.Temperatures.displayName = 'proto.huddly.Temperatures';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.CNNStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.CNNStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.CNNStatus.displayName = 'proto.huddly.CNNStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.FBEStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.huddly.FBEStatus.repeatedFields_, null);
};
goog.inherits(proto.huddly.FBEStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.FBEStatus.displayName = 'proto.huddly.FBEStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.AZStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.AZStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.AZStatus.displayName = 'proto.huddly.AZStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.LogFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.LogFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.LogFile.displayName = 'proto.huddly.LogFile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.CnnFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.CnnFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.CnnFeature.displayName = 'proto.huddly.CnnFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.Uptime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.Uptime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.Uptime.displayName = 'proto.huddly.Uptime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.Timezone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.Timezone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.Timezone.displayName = 'proto.huddly.Timezone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.huddly.Brightness = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.huddly.Brightness, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.huddly.Brightness.displayName = 'proto.huddly.Brightness';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.CropIndexStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.CropIndexStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.CropIndexStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.CropIndexStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.CropIndexStatusRequest}
 */
proto.huddly.CropIndexStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.CropIndexStatusRequest;
  return proto.huddly.CropIndexStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.CropIndexStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.CropIndexStatusRequest}
 */
proto.huddly.CropIndexStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.CropIndexStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.CropIndexStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.CropIndexStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.CropIndexStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.CropIndexStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.CropIndexStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.CropIndexStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.CropIndexStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cropIndex: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.CropIndexStatusResponse}
 */
proto.huddly.CropIndexStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.CropIndexStatusResponse;
  return proto.huddly.CropIndexStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.CropIndexStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.CropIndexStatusResponse}
 */
proto.huddly.CropIndexStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCropIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.CropIndexStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.CropIndexStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.CropIndexStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.CropIndexStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCropIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 crop_index = 1;
 * @return {number}
 */
proto.huddly.CropIndexStatusResponse.prototype.getCropIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.CropIndexStatusResponse} returns this
 */
proto.huddly.CropIndexStatusResponse.prototype.setCropIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.Rect.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.Rect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.Rect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Rect.toObject = function(includeInstance, msg) {
  var f, obj = {
    xCenter: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    yCenter: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    zoomFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.Rect}
 */
proto.huddly.Rect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.Rect;
  return proto.huddly.Rect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.Rect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.Rect}
 */
proto.huddly.Rect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXCenter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYCenter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZoomFactor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.Rect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.Rect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.Rect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Rect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXCenter();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getYCenter();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZoomFactor();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x_center = 1;
 * @return {number}
 */
proto.huddly.Rect.prototype.getXCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.Rect} returns this
 */
proto.huddly.Rect.prototype.setXCenter = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y_center = 2;
 * @return {number}
 */
proto.huddly.Rect.prototype.getYCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.Rect} returns this
 */
proto.huddly.Rect.prototype.setYCenter = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float zoom_factor = 3;
 * @return {number}
 */
proto.huddly.Rect.prototype.getZoomFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.Rect} returns this
 */
proto.huddly.Rect.prototype.setZoomFactor = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.Range.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.Range.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.Range} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Range.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFieldWithDefault(msg, 1, 0),
    max: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.Range}
 */
proto.huddly.Range.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.Range;
  return proto.huddly.Range.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.Range}
 */
proto.huddly.Range.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.Range.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.Range.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.Range} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Range.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 Min = 1;
 * @return {number}
 */
proto.huddly.Range.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.Range} returns this
 */
proto.huddly.Range.prototype.setMin = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 Max = 2;
 * @return {number}
 */
proto.huddly.Range.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.Range} returns this
 */
proto.huddly.Range.prototype.setMax = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.huddly.VideoFormats.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.VideoFormats.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.VideoFormats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.VideoFormats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.VideoFormats.toObject = function(includeInstance, msg) {
  var f, obj = {
    formatsList: jspb.Message.toObjectList(msg.getFormatsList(),
    proto.huddly.VideoFormats.Format.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.VideoFormats}
 */
proto.huddly.VideoFormats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.VideoFormats;
  return proto.huddly.VideoFormats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.VideoFormats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.VideoFormats}
 */
proto.huddly.VideoFormats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.huddly.VideoFormats.Format;
      reader.readMessage(value,proto.huddly.VideoFormats.Format.deserializeBinaryFromReader);
      msg.addFormats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.VideoFormats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.VideoFormats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.VideoFormats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.VideoFormats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.huddly.VideoFormats.Format.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.VideoFormats.Format.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.VideoFormats.Format.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.VideoFormats.Format} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.VideoFormats.Format.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    zoom: (f = msg.getZoom()) && proto.huddly.Range.toObject(includeInstance, f),
    dzoom: (f = msg.getDzoom()) && proto.huddly.Range.toObject(includeInstance, f),
    pan: (f = msg.getPan()) && proto.huddly.Range.toObject(includeInstance, f),
    tilt: (f = msg.getTilt()) && proto.huddly.Range.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 7, 0),
    uri: jspb.Message.getFieldWithDefault(msg, 8, ""),
    fps: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.VideoFormats.Format}
 */
proto.huddly.VideoFormats.Format.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.VideoFormats.Format;
  return proto.huddly.VideoFormats.Format.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.VideoFormats.Format} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.VideoFormats.Format}
 */
proto.huddly.VideoFormats.Format.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 3:
      var value = new proto.huddly.Range;
      reader.readMessage(value,proto.huddly.Range.deserializeBinaryFromReader);
      msg.setZoom(value);
      break;
    case 4:
      var value = new proto.huddly.Range;
      reader.readMessage(value,proto.huddly.Range.deserializeBinaryFromReader);
      msg.setDzoom(value);
      break;
    case 5:
      var value = new proto.huddly.Range;
      reader.readMessage(value,proto.huddly.Range.deserializeBinaryFromReader);
      msg.setPan(value);
      break;
    case 6:
      var value = new proto.huddly.Range;
      reader.readMessage(value,proto.huddly.Range.deserializeBinaryFromReader);
      msg.setTilt(value);
      break;
    case 7:
      var value = /** @type {!proto.huddly.VideoType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.VideoFormats.Format.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.VideoFormats.Format.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.VideoFormats.Format} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.VideoFormats.Format.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getZoom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.huddly.Range.serializeBinaryToWriter
    );
  }
  f = message.getDzoom();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.huddly.Range.serializeBinaryToWriter
    );
  }
  f = message.getPan();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.huddly.Range.serializeBinaryToWriter
    );
  }
  f = message.getTilt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.huddly.Range.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getFps();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional int32 Width = 1;
 * @return {number}
 */
proto.huddly.VideoFormats.Format.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.VideoFormats.Format} returns this
 */
proto.huddly.VideoFormats.Format.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 Height = 2;
 * @return {number}
 */
proto.huddly.VideoFormats.Format.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.VideoFormats.Format} returns this
 */
proto.huddly.VideoFormats.Format.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Range Zoom = 3;
 * @return {?proto.huddly.Range}
 */
proto.huddly.VideoFormats.Format.prototype.getZoom = function() {
  return /** @type{?proto.huddly.Range} */ (
    jspb.Message.getWrapperField(this, proto.huddly.Range, 3));
};


/**
 * @param {?proto.huddly.Range|undefined} value
 * @return {!proto.huddly.VideoFormats.Format} returns this
*/
proto.huddly.VideoFormats.Format.prototype.setZoom = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.huddly.VideoFormats.Format} returns this
 */
proto.huddly.VideoFormats.Format.prototype.clearZoom = function() {
  return this.setZoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.huddly.VideoFormats.Format.prototype.hasZoom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Range Dzoom = 4;
 * @return {?proto.huddly.Range}
 */
proto.huddly.VideoFormats.Format.prototype.getDzoom = function() {
  return /** @type{?proto.huddly.Range} */ (
    jspb.Message.getWrapperField(this, proto.huddly.Range, 4));
};


/**
 * @param {?proto.huddly.Range|undefined} value
 * @return {!proto.huddly.VideoFormats.Format} returns this
*/
proto.huddly.VideoFormats.Format.prototype.setDzoom = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.huddly.VideoFormats.Format} returns this
 */
proto.huddly.VideoFormats.Format.prototype.clearDzoom = function() {
  return this.setDzoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.huddly.VideoFormats.Format.prototype.hasDzoom = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Range Pan = 5;
 * @return {?proto.huddly.Range}
 */
proto.huddly.VideoFormats.Format.prototype.getPan = function() {
  return /** @type{?proto.huddly.Range} */ (
    jspb.Message.getWrapperField(this, proto.huddly.Range, 5));
};


/**
 * @param {?proto.huddly.Range|undefined} value
 * @return {!proto.huddly.VideoFormats.Format} returns this
*/
proto.huddly.VideoFormats.Format.prototype.setPan = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.huddly.VideoFormats.Format} returns this
 */
proto.huddly.VideoFormats.Format.prototype.clearPan = function() {
  return this.setPan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.huddly.VideoFormats.Format.prototype.hasPan = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Range Tilt = 6;
 * @return {?proto.huddly.Range}
 */
proto.huddly.VideoFormats.Format.prototype.getTilt = function() {
  return /** @type{?proto.huddly.Range} */ (
    jspb.Message.getWrapperField(this, proto.huddly.Range, 6));
};


/**
 * @param {?proto.huddly.Range|undefined} value
 * @return {!proto.huddly.VideoFormats.Format} returns this
*/
proto.huddly.VideoFormats.Format.prototype.setTilt = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.huddly.VideoFormats.Format} returns this
 */
proto.huddly.VideoFormats.Format.prototype.clearTilt = function() {
  return this.setTilt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.huddly.VideoFormats.Format.prototype.hasTilt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional VideoType Type = 7;
 * @return {!proto.huddly.VideoType}
 */
proto.huddly.VideoFormats.Format.prototype.getType = function() {
  return /** @type {!proto.huddly.VideoType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.huddly.VideoType} value
 * @return {!proto.huddly.VideoFormats.Format} returns this
 */
proto.huddly.VideoFormats.Format.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional string Uri = 8;
 * @return {string}
 */
proto.huddly.VideoFormats.Format.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.huddly.VideoFormats.Format} returns this
 */
proto.huddly.VideoFormats.Format.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 Fps = 9;
 * @return {number}
 */
proto.huddly.VideoFormats.Format.prototype.getFps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.VideoFormats.Format} returns this
 */
proto.huddly.VideoFormats.Format.prototype.setFps = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated Format formats = 1;
 * @return {!Array<!proto.huddly.VideoFormats.Format>}
 */
proto.huddly.VideoFormats.prototype.getFormatsList = function() {
  return /** @type{!Array<!proto.huddly.VideoFormats.Format>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.huddly.VideoFormats.Format, 1));
};


/**
 * @param {!Array<!proto.huddly.VideoFormats.Format>} value
 * @return {!proto.huddly.VideoFormats} returns this
*/
proto.huddly.VideoFormats.prototype.setFormatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.huddly.VideoFormats.Format=} opt_value
 * @param {number=} opt_index
 * @return {!proto.huddly.VideoFormats.Format}
 */
proto.huddly.VideoFormats.prototype.addFormats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.huddly.VideoFormats.Format, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.huddly.VideoFormats} returns this
 */
proto.huddly.VideoFormats.prototype.clearFormatsList = function() {
  return this.setFormatsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.huddly.IndexedTransitions.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.IndexedTransitions.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.IndexedTransitions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.IndexedTransitions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.IndexedTransitions.toObject = function(includeInstance, msg) {
  var f, obj = {
    startingIndexList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    transitionList: jspb.Message.toObjectList(msg.getTransitionList(),
    proto.huddly.IndexedTransitions.Transition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.IndexedTransitions}
 */
proto.huddly.IndexedTransitions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.IndexedTransitions;
  return proto.huddly.IndexedTransitions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.IndexedTransitions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.IndexedTransitions}
 */
proto.huddly.IndexedTransitions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setStartingIndexList(value);
      break;
    case 2:
      var value = new proto.huddly.IndexedTransitions.Transition;
      reader.readMessage(value,proto.huddly.IndexedTransitions.Transition.deserializeBinaryFromReader);
      msg.addTransition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.IndexedTransitions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.IndexedTransitions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.IndexedTransitions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.IndexedTransitions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartingIndexList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getTransitionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.huddly.IndexedTransitions.Transition.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.huddly.IndexedTransitions.Transition.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.IndexedTransitions.Transition.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.IndexedTransitions.Transition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.IndexedTransitions.Transition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.IndexedTransitions.Transition.toObject = function(includeInstance, msg) {
  var f, obj = {
    cropsList: jspb.Message.toObjectList(msg.getCropsList(),
    proto.huddly.IndexedTransitions.Transition.Crop.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.IndexedTransitions.Transition}
 */
proto.huddly.IndexedTransitions.Transition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.IndexedTransitions.Transition;
  return proto.huddly.IndexedTransitions.Transition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.IndexedTransitions.Transition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.IndexedTransitions.Transition}
 */
proto.huddly.IndexedTransitions.Transition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.huddly.IndexedTransitions.Transition.Crop;
      reader.readMessage(value,proto.huddly.IndexedTransitions.Transition.Crop.deserializeBinaryFromReader);
      msg.addCrops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.IndexedTransitions.Transition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.IndexedTransitions.Transition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.IndexedTransitions.Transition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.IndexedTransitions.Transition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCropsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.huddly.IndexedTransitions.Transition.Crop.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.IndexedTransitions.Transition.Crop.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.IndexedTransitions.Transition.Crop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.IndexedTransitions.Transition.Crop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.IndexedTransitions.Transition.Crop.toObject = function(includeInstance, msg) {
  var f, obj = {
    rect: (f = msg.getRect()) && proto.huddly.Rect.toObject(includeInstance, f),
    cropIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.IndexedTransitions.Transition.Crop}
 */
proto.huddly.IndexedTransitions.Transition.Crop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.IndexedTransitions.Transition.Crop;
  return proto.huddly.IndexedTransitions.Transition.Crop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.IndexedTransitions.Transition.Crop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.IndexedTransitions.Transition.Crop}
 */
proto.huddly.IndexedTransitions.Transition.Crop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.huddly.Rect;
      reader.readMessage(value,proto.huddly.Rect.deserializeBinaryFromReader);
      msg.setRect(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCropIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.IndexedTransitions.Transition.Crop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.IndexedTransitions.Transition.Crop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.IndexedTransitions.Transition.Crop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.IndexedTransitions.Transition.Crop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRect();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.huddly.Rect.serializeBinaryToWriter
    );
  }
  f = message.getCropIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Rect rect = 1;
 * @return {?proto.huddly.Rect}
 */
proto.huddly.IndexedTransitions.Transition.Crop.prototype.getRect = function() {
  return /** @type{?proto.huddly.Rect} */ (
    jspb.Message.getWrapperField(this, proto.huddly.Rect, 1));
};


/**
 * @param {?proto.huddly.Rect|undefined} value
 * @return {!proto.huddly.IndexedTransitions.Transition.Crop} returns this
*/
proto.huddly.IndexedTransitions.Transition.Crop.prototype.setRect = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.huddly.IndexedTransitions.Transition.Crop} returns this
 */
proto.huddly.IndexedTransitions.Transition.Crop.prototype.clearRect = function() {
  return this.setRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.huddly.IndexedTransitions.Transition.Crop.prototype.hasRect = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 crop_index = 2;
 * @return {number}
 */
proto.huddly.IndexedTransitions.Transition.Crop.prototype.getCropIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.IndexedTransitions.Transition.Crop} returns this
 */
proto.huddly.IndexedTransitions.Transition.Crop.prototype.setCropIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Crop crops = 1;
 * @return {!Array<!proto.huddly.IndexedTransitions.Transition.Crop>}
 */
proto.huddly.IndexedTransitions.Transition.prototype.getCropsList = function() {
  return /** @type{!Array<!proto.huddly.IndexedTransitions.Transition.Crop>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.huddly.IndexedTransitions.Transition.Crop, 1));
};


/**
 * @param {!Array<!proto.huddly.IndexedTransitions.Transition.Crop>} value
 * @return {!proto.huddly.IndexedTransitions.Transition} returns this
*/
proto.huddly.IndexedTransitions.Transition.prototype.setCropsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.huddly.IndexedTransitions.Transition.Crop=} opt_value
 * @param {number=} opt_index
 * @return {!proto.huddly.IndexedTransitions.Transition.Crop}
 */
proto.huddly.IndexedTransitions.Transition.prototype.addCrops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.huddly.IndexedTransitions.Transition.Crop, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.huddly.IndexedTransitions.Transition} returns this
 */
proto.huddly.IndexedTransitions.Transition.prototype.clearCropsList = function() {
  return this.setCropsList([]);
};


/**
 * repeated int32 starting_index = 1;
 * @return {!Array<number>}
 */
proto.huddly.IndexedTransitions.prototype.getStartingIndexList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.huddly.IndexedTransitions} returns this
 */
proto.huddly.IndexedTransitions.prototype.setStartingIndexList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.huddly.IndexedTransitions} returns this
 */
proto.huddly.IndexedTransitions.prototype.addStartingIndex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.huddly.IndexedTransitions} returns this
 */
proto.huddly.IndexedTransitions.prototype.clearStartingIndexList = function() {
  return this.setStartingIndexList([]);
};


/**
 * repeated Transition transition = 2;
 * @return {!Array<!proto.huddly.IndexedTransitions.Transition>}
 */
proto.huddly.IndexedTransitions.prototype.getTransitionList = function() {
  return /** @type{!Array<!proto.huddly.IndexedTransitions.Transition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.huddly.IndexedTransitions.Transition, 2));
};


/**
 * @param {!Array<!proto.huddly.IndexedTransitions.Transition>} value
 * @return {!proto.huddly.IndexedTransitions} returns this
*/
proto.huddly.IndexedTransitions.prototype.setTransitionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.huddly.IndexedTransitions.Transition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.huddly.IndexedTransitions.Transition}
 */
proto.huddly.IndexedTransitions.prototype.addTransition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.huddly.IndexedTransitions.Transition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.huddly.IndexedTransitions} returns this
 */
proto.huddly.IndexedTransitions.prototype.clearTransitionList = function() {
  return this.setTransitionList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.IndexedTransitionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.IndexedTransitionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.IndexedTransitionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.IndexedTransitionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chosenStartingIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    currentPosition: (f = msg.getCurrentPosition()) && proto.huddly.Rect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.IndexedTransitionsResponse}
 */
proto.huddly.IndexedTransitionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.IndexedTransitionsResponse;
  return proto.huddly.IndexedTransitionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.IndexedTransitionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.IndexedTransitionsResponse}
 */
proto.huddly.IndexedTransitionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChosenStartingIndex(value);
      break;
    case 2:
      var value = new proto.huddly.Rect;
      reader.readMessage(value,proto.huddly.Rect.deserializeBinaryFromReader);
      msg.setCurrentPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.IndexedTransitionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.IndexedTransitionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.IndexedTransitionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.IndexedTransitionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChosenStartingIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCurrentPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.huddly.Rect.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 chosen_starting_index = 1;
 * @return {number}
 */
proto.huddly.IndexedTransitionsResponse.prototype.getChosenStartingIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.IndexedTransitionsResponse} returns this
 */
proto.huddly.IndexedTransitionsResponse.prototype.setChosenStartingIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Rect current_position = 2;
 * @return {?proto.huddly.Rect}
 */
proto.huddly.IndexedTransitionsResponse.prototype.getCurrentPosition = function() {
  return /** @type{?proto.huddly.Rect} */ (
    jspb.Message.getWrapperField(this, proto.huddly.Rect, 2));
};


/**
 * @param {?proto.huddly.Rect|undefined} value
 * @return {!proto.huddly.IndexedTransitionsResponse} returns this
*/
proto.huddly.IndexedTransitionsResponse.prototype.setCurrentPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.huddly.IndexedTransitionsResponse} returns this
 */
proto.huddly.IndexedTransitionsResponse.prototype.clearCurrentPosition = function() {
  return this.setCurrentPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.huddly.IndexedTransitionsResponse.prototype.hasCurrentPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.CurrentPtzCrop.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.CurrentPtzCrop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.CurrentPtzCrop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.CurrentPtzCrop.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentCrop: (f = msg.getCurrentCrop()) && proto.huddly.Rect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.CurrentPtzCrop}
 */
proto.huddly.CurrentPtzCrop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.CurrentPtzCrop;
  return proto.huddly.CurrentPtzCrop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.CurrentPtzCrop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.CurrentPtzCrop}
 */
proto.huddly.CurrentPtzCrop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.huddly.Rect;
      reader.readMessage(value,proto.huddly.Rect.deserializeBinaryFromReader);
      msg.setCurrentCrop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.CurrentPtzCrop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.CurrentPtzCrop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.CurrentPtzCrop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.CurrentPtzCrop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentCrop();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.huddly.Rect.serializeBinaryToWriter
    );
  }
};


/**
 * optional Rect current_crop = 1;
 * @return {?proto.huddly.Rect}
 */
proto.huddly.CurrentPtzCrop.prototype.getCurrentCrop = function() {
  return /** @type{?proto.huddly.Rect} */ (
    jspb.Message.getWrapperField(this, proto.huddly.Rect, 1));
};


/**
 * @param {?proto.huddly.Rect|undefined} value
 * @return {!proto.huddly.CurrentPtzCrop} returns this
*/
proto.huddly.CurrentPtzCrop.prototype.setCurrentCrop = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.huddly.CurrentPtzCrop} returns this
 */
proto.huddly.CurrentPtzCrop.prototype.clearCurrentCrop = function() {
  return this.setCurrentCrop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.huddly.CurrentPtzCrop.prototype.hasCurrentCrop = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.Chunk.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.Chunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.Chunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Chunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.Chunk}
 */
proto.huddly.Chunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.Chunk;
  return proto.huddly.Chunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.Chunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.Chunk}
 */
proto.huddly.Chunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.Chunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.Chunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.Chunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Chunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes Content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.huddly.Chunk.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.huddly.Chunk.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes Content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.huddly.Chunk.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.huddly.Chunk} returns this
 */
proto.huddly.Chunk.prototype.setContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.DeviceVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.DeviceVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.DeviceVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.DeviceVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    versionState: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.DeviceVersion}
 */
proto.huddly.DeviceVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.DeviceVersion;
  return proto.huddly.DeviceVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.DeviceVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.DeviceVersion}
 */
proto.huddly.DeviceVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!proto.huddly.VersionState} */ (reader.readEnum());
      msg.setVersionState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.DeviceVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.DeviceVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.DeviceVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.DeviceVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersionState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.huddly.DeviceVersion.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.huddly.DeviceVersion} returns this
 */
proto.huddly.DeviceVersion.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional VersionState version_state = 2;
 * @return {!proto.huddly.VersionState}
 */
proto.huddly.DeviceVersion.prototype.getVersionState = function() {
  return /** @type {!proto.huddly.VersionState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.huddly.VersionState} value
 * @return {!proto.huddly.DeviceVersion} returns this
 */
proto.huddly.DeviceVersion.prototype.setVersionState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.PTZ.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.PTZ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.PTZ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.PTZ.toObject = function(includeInstance, msg) {
  var f, obj = {
    pan: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tilt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    zoom: jspb.Message.getFieldWithDefault(msg, 3, 0),
    trans: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.PTZ}
 */
proto.huddly.PTZ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.PTZ;
  return proto.huddly.PTZ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.PTZ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.PTZ}
 */
proto.huddly.PTZ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPan(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTilt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoom(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrans(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.PTZ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.PTZ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.PTZ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.PTZ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPan();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTilt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getZoom();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTrans();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 Pan = 1;
 * @return {number}
 */
proto.huddly.PTZ.prototype.getPan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.PTZ} returns this
 */
proto.huddly.PTZ.prototype.setPan = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 Tilt = 2;
 * @return {number}
 */
proto.huddly.PTZ.prototype.getTilt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.PTZ} returns this
 */
proto.huddly.PTZ.prototype.setTilt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 Zoom = 3;
 * @return {number}
 */
proto.huddly.PTZ.prototype.getZoom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.PTZ} returns this
 */
proto.huddly.PTZ.prototype.setZoom = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 Trans = 4;
 * @return {number}
 */
proto.huddly.PTZ.prototype.getTrans = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.PTZ} returns this
 */
proto.huddly.PTZ.prototype.setTrans = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.DeviceName.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.DeviceName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.DeviceName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.DeviceName.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.DeviceName}
 */
proto.huddly.DeviceName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.DeviceName;
  return proto.huddly.DeviceName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.DeviceName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.DeviceName}
 */
proto.huddly.DeviceName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.DeviceName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.DeviceName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.DeviceName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.DeviceName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.huddly.DeviceName.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.huddly.DeviceName} returns this
 */
proto.huddly.DeviceName.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.BootSlot.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.BootSlot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.BootSlot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.BootSlot.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.BootSlot}
 */
proto.huddly.BootSlot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.BootSlot;
  return proto.huddly.BootSlot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.BootSlot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.BootSlot}
 */
proto.huddly.BootSlot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!proto.huddly.Slot} */ (reader.readEnum());
      msg.setSlot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.BootSlot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.BootSlot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.BootSlot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.BootSlot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional Slot slot = 3;
 * @return {!proto.huddly.Slot}
 */
proto.huddly.BootSlot.prototype.getSlot = function() {
  return /** @type {!proto.huddly.Slot} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.huddly.Slot} value
 * @return {!proto.huddly.BootSlot} returns this
 */
proto.huddly.BootSlot.prototype.setSlot = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.DeviceStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.DeviceStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.DeviceStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.DeviceStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.DeviceStatus}
 */
proto.huddly.DeviceStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.DeviceStatus;
  return proto.huddly.DeviceStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.DeviceStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.DeviceStatus}
 */
proto.huddly.DeviceStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!proto.huddly.StatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.DeviceStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.DeviceStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.DeviceStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.DeviceStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string Message = 1;
 * @return {string}
 */
proto.huddly.DeviceStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.huddly.DeviceStatus} returns this
 */
proto.huddly.DeviceStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StatusCode Code = 2;
 * @return {!proto.huddly.StatusCode}
 */
proto.huddly.DeviceStatus.prototype.getCode = function() {
  return /** @type {!proto.huddly.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.huddly.StatusCode} value
 * @return {!proto.huddly.DeviceStatus} returns this
 */
proto.huddly.DeviceStatus.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.Ipv4Config.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.Ipv4Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.Ipv4Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Ipv4Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bits: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.Ipv4Config}
 */
proto.huddly.Ipv4Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.Ipv4Config;
  return proto.huddly.Ipv4Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.Ipv4Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.Ipv4Config}
 */
proto.huddly.Ipv4Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.Ipv4Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.Ipv4Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.Ipv4Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Ipv4Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f !== 0) {
    writer.writeFixed32(
      1,
      f
    );
  }
  f = message.getBits();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional fixed32 Address = 1;
 * @return {number}
 */
proto.huddly.Ipv4Config.prototype.getAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.Ipv4Config} returns this
 */
proto.huddly.Ipv4Config.prototype.setAddress = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 Bits = 2;
 * @return {number}
 */
proto.huddly.Ipv4Config.prototype.getBits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.Ipv4Config} returns this
 */
proto.huddly.Ipv4Config.prototype.setBits = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.Temperature.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.Temperature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.Temperature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Temperature.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.Temperature}
 */
proto.huddly.Temperature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.Temperature;
  return proto.huddly.Temperature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.Temperature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.Temperature}
 */
proto.huddly.Temperature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.Temperature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.Temperature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.Temperature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Temperature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.huddly.Temperature.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.huddly.Temperature} returns this
 */
proto.huddly.Temperature.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float Value = 2;
 * @return {number}
 */
proto.huddly.Temperature.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.Temperature} returns this
 */
proto.huddly.Temperature.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.huddly.Temperatures.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.Temperatures.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.Temperatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.Temperatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Temperatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperaturesList: jspb.Message.toObjectList(msg.getTemperaturesList(),
    proto.huddly.Temperature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.Temperatures}
 */
proto.huddly.Temperatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.Temperatures;
  return proto.huddly.Temperatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.Temperatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.Temperatures}
 */
proto.huddly.Temperatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.huddly.Temperature;
      reader.readMessage(value,proto.huddly.Temperature.deserializeBinaryFromReader);
      msg.addTemperatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.Temperatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.Temperatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.Temperatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Temperatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemperaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.huddly.Temperature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Temperature temperatures = 1;
 * @return {!Array<!proto.huddly.Temperature>}
 */
proto.huddly.Temperatures.prototype.getTemperaturesList = function() {
  return /** @type{!Array<!proto.huddly.Temperature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.huddly.Temperature, 1));
};


/**
 * @param {!Array<!proto.huddly.Temperature>} value
 * @return {!proto.huddly.Temperatures} returns this
*/
proto.huddly.Temperatures.prototype.setTemperaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.huddly.Temperature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.huddly.Temperature}
 */
proto.huddly.Temperatures.prototype.addTemperatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.huddly.Temperature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.huddly.Temperatures} returns this
 */
proto.huddly.Temperatures.prototype.clearTemperaturesList = function() {
  return this.setTemperaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.CNNStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.CNNStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.CNNStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.CNNStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fbeStatus: (f = msg.getFbeStatus()) && proto.huddly.FBEStatus.toObject(includeInstance, f),
    azStatus: (f = msg.getAzStatus()) && proto.huddly.AZStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.CNNStatus}
 */
proto.huddly.CNNStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.CNNStatus;
  return proto.huddly.CNNStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.CNNStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.CNNStatus}
 */
proto.huddly.CNNStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.huddly.StatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.huddly.FBEStatus;
      reader.readMessage(value,proto.huddly.FBEStatus.deserializeBinaryFromReader);
      msg.setFbeStatus(value);
      break;
    case 3:
      var value = new proto.huddly.AZStatus;
      reader.readMessage(value,proto.huddly.AZStatus.deserializeBinaryFromReader);
      msg.setAzStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.CNNStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.CNNStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.CNNStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.CNNStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFbeStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.huddly.FBEStatus.serializeBinaryToWriter
    );
  }
  f = message.getAzStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.huddly.AZStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatusCode Code = 1;
 * @return {!proto.huddly.StatusCode}
 */
proto.huddly.CNNStatus.prototype.getCode = function() {
  return /** @type {!proto.huddly.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.huddly.StatusCode} value
 * @return {!proto.huddly.CNNStatus} returns this
 */
proto.huddly.CNNStatus.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FBEStatus fbe_status = 2;
 * @return {?proto.huddly.FBEStatus}
 */
proto.huddly.CNNStatus.prototype.getFbeStatus = function() {
  return /** @type{?proto.huddly.FBEStatus} */ (
    jspb.Message.getWrapperField(this, proto.huddly.FBEStatus, 2));
};


/**
 * @param {?proto.huddly.FBEStatus|undefined} value
 * @return {!proto.huddly.CNNStatus} returns this
*/
proto.huddly.CNNStatus.prototype.setFbeStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.huddly.CNNStatus} returns this
 */
proto.huddly.CNNStatus.prototype.clearFbeStatus = function() {
  return this.setFbeStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.huddly.CNNStatus.prototype.hasFbeStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AZStatus az_status = 3;
 * @return {?proto.huddly.AZStatus}
 */
proto.huddly.CNNStatus.prototype.getAzStatus = function() {
  return /** @type{?proto.huddly.AZStatus} */ (
    jspb.Message.getWrapperField(this, proto.huddly.AZStatus, 3));
};


/**
 * @param {?proto.huddly.AZStatus|undefined} value
 * @return {!proto.huddly.CNNStatus} returns this
*/
proto.huddly.CNNStatus.prototype.setAzStatus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.huddly.CNNStatus} returns this
 */
proto.huddly.CNNStatus.prototype.clearAzStatus = function() {
  return this.setAzStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.huddly.CNNStatus.prototype.hasAzStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.huddly.FBEStatus.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.FBEStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.FBEStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.FBEStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.FBEStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    fbeEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    numIterations: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numWeightsCalculated: jspb.Message.getFieldWithDefault(msg, 3, 0),
    currentFaceWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    perFaceWeightList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.FBEStatus}
 */
proto.huddly.FBEStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.FBEStatus;
  return proto.huddly.FBEStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.FBEStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.FBEStatus}
 */
proto.huddly.FBEStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFbeEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumIterations(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumWeightsCalculated(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentFaceWeight(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setPerFaceWeightList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.FBEStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.FBEStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.FBEStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.FBEStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFbeEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getNumIterations();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNumWeightsCalculated();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getCurrentFaceWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getPerFaceWeightList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
};


/**
 * optional bool fbe_enabled = 1;
 * @return {boolean}
 */
proto.huddly.FBEStatus.prototype.getFbeEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.huddly.FBEStatus} returns this
 */
proto.huddly.FBEStatus.prototype.setFbeEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint64 num_iterations = 2;
 * @return {number}
 */
proto.huddly.FBEStatus.prototype.getNumIterations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.FBEStatus} returns this
 */
proto.huddly.FBEStatus.prototype.setNumIterations = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 num_weights_calculated = 3;
 * @return {number}
 */
proto.huddly.FBEStatus.prototype.getNumWeightsCalculated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.FBEStatus} returns this
 */
proto.huddly.FBEStatus.prototype.setNumWeightsCalculated = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float current_face_weight = 4;
 * @return {number}
 */
proto.huddly.FBEStatus.prototype.getCurrentFaceWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.FBEStatus} returns this
 */
proto.huddly.FBEStatus.prototype.setCurrentFaceWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * repeated float per_face_weight = 5;
 * @return {!Array<number>}
 */
proto.huddly.FBEStatus.prototype.getPerFaceWeightList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.huddly.FBEStatus} returns this
 */
proto.huddly.FBEStatus.prototype.setPerFaceWeightList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.huddly.FBEStatus} returns this
 */
proto.huddly.FBEStatus.prototype.addPerFaceWeight = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.huddly.FBEStatus} returns this
 */
proto.huddly.FBEStatus.prototype.clearPerFaceWeightList = function() {
  return this.setPerFaceWeightList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.AZStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.AZStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.AZStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.AZStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    azEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.AZStatus}
 */
proto.huddly.AZStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.AZStatus;
  return proto.huddly.AZStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.AZStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.AZStatus}
 */
proto.huddly.AZStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAzEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.AZStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.AZStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.AZStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.AZStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAzEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool az_enabled = 1;
 * @return {boolean}
 */
proto.huddly.AZStatus.prototype.getAzEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.huddly.AZStatus} returns this
 */
proto.huddly.AZStatus.prototype.setAzEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.LogFile.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.LogFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.LogFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.LogFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    file: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keepLog: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.LogFile}
 */
proto.huddly.LogFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.LogFile;
  return proto.huddly.LogFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.LogFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.LogFile}
 */
proto.huddly.LogFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.huddly.LogFiles} */ (reader.readEnum());
      msg.setFile(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeepLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.LogFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.LogFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.LogFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.LogFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKeepLog();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional LogFiles file = 1;
 * @return {!proto.huddly.LogFiles}
 */
proto.huddly.LogFile.prototype.getFile = function() {
  return /** @type {!proto.huddly.LogFiles} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.huddly.LogFiles} value
 * @return {!proto.huddly.LogFile} returns this
 */
proto.huddly.LogFile.prototype.setFile = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool keep_log = 2;
 * @return {boolean}
 */
proto.huddly.LogFile.prototype.getKeepLog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.huddly.LogFile} returns this
 */
proto.huddly.LogFile.prototype.setKeepLog = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.CnnFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.CnnFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.CnnFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.CnnFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    feature: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.CnnFeature}
 */
proto.huddly.CnnFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.CnnFeature;
  return proto.huddly.CnnFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.CnnFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.CnnFeature}
 */
proto.huddly.CnnFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.huddly.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {!proto.huddly.Feature} */ (reader.readEnum());
      msg.setFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.CnnFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.CnnFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.CnnFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.CnnFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFeature();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Mode mode = 1;
 * @return {!proto.huddly.Mode}
 */
proto.huddly.CnnFeature.prototype.getMode = function() {
  return /** @type {!proto.huddly.Mode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.huddly.Mode} value
 * @return {!proto.huddly.CnnFeature} returns this
 */
proto.huddly.CnnFeature.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Feature feature = 2;
 * @return {!proto.huddly.Feature}
 */
proto.huddly.CnnFeature.prototype.getFeature = function() {
  return /** @type {!proto.huddly.Feature} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.huddly.Feature} value
 * @return {!proto.huddly.CnnFeature} returns this
 */
proto.huddly.CnnFeature.prototype.setFeature = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.Uptime.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.Uptime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.Uptime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Uptime.toObject = function(includeInstance, msg) {
  var f, obj = {
    uptime: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.Uptime}
 */
proto.huddly.Uptime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.Uptime;
  return proto.huddly.Uptime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.Uptime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.Uptime}
 */
proto.huddly.Uptime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUptime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.Uptime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.Uptime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.Uptime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Uptime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUptime();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float uptime = 1;
 * @return {number}
 */
proto.huddly.Uptime.prototype.getUptime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.Uptime} returns this
 */
proto.huddly.Uptime.prototype.setUptime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.Timezone.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.Timezone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.Timezone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Timezone.toObject = function(includeInstance, msg) {
  var f, obj = {
    timezone: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.Timezone}
 */
proto.huddly.Timezone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.Timezone;
  return proto.huddly.Timezone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.Timezone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.Timezone}
 */
proto.huddly.Timezone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.Timezone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.Timezone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.Timezone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Timezone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string timezone = 1;
 * @return {string}
 */
proto.huddly.Timezone.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.huddly.Timezone} returns this
 */
proto.huddly.Timezone.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.huddly.Brightness.prototype.toObject = function(opt_includeInstance) {
  return proto.huddly.Brightness.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.huddly.Brightness} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Brightness.toObject = function(includeInstance, msg) {
  var f, obj = {
    brightness: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.huddly.Brightness}
 */
proto.huddly.Brightness.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.huddly.Brightness;
  return proto.huddly.Brightness.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.huddly.Brightness} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.huddly.Brightness}
 */
proto.huddly.Brightness.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBrightness(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.huddly.Brightness.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.huddly.Brightness.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.huddly.Brightness} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.huddly.Brightness.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrightness();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 brightness = 1;
 * @return {number}
 */
proto.huddly.Brightness.prototype.getBrightness = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.huddly.Brightness} returns this
 */
proto.huddly.Brightness.prototype.setBrightness = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.huddly.VideoType = {
  MAIN: 0,
  PREVIEW: 1
};

/**
 * @enum {number}
 */
proto.huddly.VersionState = {
  UNKNOWNVERSIONSTATE: 0,
  VERIFIED: 1,
  UNVERIFIED: 2,
  RECOVERY: 3
};

/**
 * @enum {number}
 */
proto.huddly.StatusCode = {
  UNKNOWN: 0,
  OK: 1,
  FAILED: 2
};

/**
 * @enum {number}
 */
proto.huddly.Slot = {
  A: 0,
  B: 1,
  C: 2,
  UNKNOWNSLOT: 3
};

/**
 * @enum {number}
 */
proto.huddly.LogFiles = {
  APP: 0,
  MYRIAD: 1,
  DMESG: 2
};

/**
 * @enum {number}
 */
proto.huddly.Mode = {
  START: 0,
  STOP: 1
};

/**
 * @enum {number}
 */
proto.huddly.Feature = {
  FACEBASEDEXPOSURE: 0,
  AUTOZOOM: 1
};

goog.object.extend(exports, proto.huddly);
